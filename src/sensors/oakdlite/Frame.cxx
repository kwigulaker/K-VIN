// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Frame.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Frame.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Frame::Frame()
{
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@59fd97a8
    m_width = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f5ac9e4
    m_height = 0;
    // m_step com.eprosima.idl.parser.typecode.PrimitiveTypeCode@123ef382
    m_step = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@dbf57b3

    // m_encoding com.eprosima.idl.parser.typecode.StringTypeCode@384ad17b
    m_encoding ="";
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@61862a7f
    m_timestamp = 0;

}

Frame::~Frame()
{





}

Frame::Frame(
        const Frame& x)
{
    m_width = x.m_width;
    m_height = x.m_height;
    m_step = x.m_step;
    m_data = x.m_data;
    m_encoding = x.m_encoding;
    m_timestamp = x.m_timestamp;
}

Frame::Frame(
        Frame&& x)
{
    m_width = x.m_width;
    m_height = x.m_height;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
    m_encoding = std::move(x.m_encoding);
    m_timestamp = x.m_timestamp;
}

Frame& Frame::operator =(
        const Frame& x)
{

    m_width = x.m_width;
    m_height = x.m_height;
    m_step = x.m_step;
    m_data = x.m_data;
    m_encoding = x.m_encoding;
    m_timestamp = x.m_timestamp;

    return *this;
}

Frame& Frame::operator =(
        Frame&& x)
{

    m_width = x.m_width;
    m_height = x.m_height;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
    m_encoding = std::move(x.m_encoding);
    m_timestamp = x.m_timestamp;

    return *this;
}

bool Frame::operator ==(
        const Frame& x) const
{

    return (m_width == x.m_width && m_height == x.m_height && m_step == x.m_step && m_data == x.m_data && m_encoding == x.m_encoding && m_timestamp == x.m_timestamp);
}

bool Frame::operator !=(
        const Frame& x) const
{
    return !(*this == x);
}

size_t Frame::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Frame::getCdrSerializedSize(
        const Frame& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.encoding().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Frame::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_width;
    scdr << m_height;
    scdr << m_step;
    scdr << m_data;
    scdr << m_encoding;
    scdr << m_timestamp;

}

void Frame::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_step;
    dcdr >> m_data;
    dcdr >> m_encoding;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Frame::width(
        int32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
int32_t Frame::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
int32_t& Frame::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Frame::height(
        int32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
int32_t Frame::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
int32_t& Frame::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member step
 * @param _step New value for member step
 */
void Frame::step(
        int32_t _step)
{
    m_step = _step;
}

/*!
 * @brief This function returns the value of member step
 * @return Value of member step
 */
int32_t Frame::step() const
{
    return m_step;
}

/*!
 * @brief This function returns a reference to member step
 * @return Reference to member step
 */
int32_t& Frame::step()
{
    return m_step;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Frame::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Frame::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& Frame::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& Frame::data()
{
    return m_data;
}
/*!
 * @brief This function copies the value in member encoding
 * @param _encoding New value to be copied in member encoding
 */
void Frame::encoding(
        const std::string& _encoding)
{
    m_encoding = _encoding;
}

/*!
 * @brief This function moves the value in member encoding
 * @param _encoding New value to be moved in member encoding
 */
void Frame::encoding(
        std::string&& _encoding)
{
    m_encoding = std::move(_encoding);
}

/*!
 * @brief This function returns a constant reference to member encoding
 * @return Constant reference to member encoding
 */
const std::string& Frame::encoding() const
{
    return m_encoding;
}

/*!
 * @brief This function returns a reference to member encoding
 * @return Reference to member encoding
 */
std::string& Frame::encoding()
{
    return m_encoding;
}
/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Frame::timestamp(
        int32_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
int32_t Frame::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
int32_t& Frame::timestamp()
{
    return m_timestamp;
}


size_t Frame::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Frame::isKeyDefined()
{
    return false;
}

void Frame::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
