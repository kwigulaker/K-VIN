// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SensorDataSync.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SensorDataSync.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

SensorDataSync::SensorDataSync()
{
    // m_cam_L com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@a1153bc

    // m_cam_R com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@a1153bc

    // m_imu_parsed com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1aafa419

    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@47eaca72
    m_timestamp = 0;

}

SensorDataSync::~SensorDataSync()
{



}

SensorDataSync::SensorDataSync(
        const SensorDataSync& x)
{
    m_cam_L = x.m_cam_L;
    m_cam_R = x.m_cam_R;
    m_imu_parsed = x.m_imu_parsed;
    m_timestamp = x.m_timestamp;
}

SensorDataSync::SensorDataSync(
        SensorDataSync&& x)
{
    m_cam_L = std::move(x.m_cam_L);
    m_cam_R = std::move(x.m_cam_R);
    m_imu_parsed = std::move(x.m_imu_parsed);
    m_timestamp = x.m_timestamp;
}

SensorDataSync& SensorDataSync::operator =(
        const SensorDataSync& x)
{

    m_cam_L = x.m_cam_L;
    m_cam_R = x.m_cam_R;
    m_imu_parsed = x.m_imu_parsed;
    m_timestamp = x.m_timestamp;

    return *this;
}

SensorDataSync& SensorDataSync::operator =(
        SensorDataSync&& x)
{

    m_cam_L = std::move(x.m_cam_L);
    m_cam_R = std::move(x.m_cam_R);
    m_imu_parsed = std::move(x.m_imu_parsed);
    m_timestamp = x.m_timestamp;

    return *this;
}

bool SensorDataSync::operator ==(
        const SensorDataSync& x) const
{

    return (m_cam_L == x.m_cam_L && m_cam_R == x.m_cam_R && m_imu_parsed == x.m_imu_parsed && m_timestamp == x.m_timestamp);
}

bool SensorDataSync::operator !=(
        const SensorDataSync& x) const
{
    return !(*this == x);
}

size_t SensorDataSync::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += FrameMSG::getMaxCdrSerializedSize(current_alignment);
    current_alignment += FrameMSG::getMaxCdrSerializedSize(current_alignment);
    current_alignment += MPU6050MSG::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t SensorDataSync::getCdrSerializedSize(
        const SensorDataSync& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += FrameMSG::getCdrSerializedSize(data.cam_L(), current_alignment);
    current_alignment += FrameMSG::getCdrSerializedSize(data.cam_R(), current_alignment);
    current_alignment += MPU6050MSG::getCdrSerializedSize(data.imu_parsed(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void SensorDataSync::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_cam_L;
    scdr << m_cam_R;
    scdr << m_imu_parsed;
    scdr << m_timestamp;

}

void SensorDataSync::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_cam_L;
    dcdr >> m_cam_R;
    dcdr >> m_imu_parsed;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function copies the value in member cam_L
 * @param _cam_L New value to be copied in member cam_L
 */
void SensorDataSync::cam_L(
        const FrameMSG& _cam_L)
{
    m_cam_L = _cam_L;
}

/*!
 * @brief This function moves the value in member cam_L
 * @param _cam_L New value to be moved in member cam_L
 */
void SensorDataSync::cam_L(
        FrameMSG&& _cam_L)
{
    m_cam_L = std::move(_cam_L);
}

/*!
 * @brief This function returns a constant reference to member cam_L
 * @return Constant reference to member cam_L
 */
const FrameMSG& SensorDataSync::cam_L() const
{
    return m_cam_L;
}

/*!
 * @brief This function returns a reference to member cam_L
 * @return Reference to member cam_L
 */
FrameMSG& SensorDataSync::cam_L()
{
    return m_cam_L;
}
/*!
 * @brief This function copies the value in member cam_R
 * @param _cam_R New value to be copied in member cam_R
 */
void SensorDataSync::cam_R(
        const FrameMSG& _cam_R)
{
    m_cam_R = _cam_R;
}

/*!
 * @brief This function moves the value in member cam_R
 * @param _cam_R New value to be moved in member cam_R
 */
void SensorDataSync::cam_R(
        FrameMSG&& _cam_R)
{
    m_cam_R = std::move(_cam_R);
}

/*!
 * @brief This function returns a constant reference to member cam_R
 * @return Constant reference to member cam_R
 */
const FrameMSG& SensorDataSync::cam_R() const
{
    return m_cam_R;
}

/*!
 * @brief This function returns a reference to member cam_R
 * @return Reference to member cam_R
 */
FrameMSG& SensorDataSync::cam_R()
{
    return m_cam_R;
}
/*!
 * @brief This function copies the value in member imu_parsed
 * @param _imu_parsed New value to be copied in member imu_parsed
 */
void SensorDataSync::imu_parsed(
        const MPU6050MSG& _imu_parsed)
{
    m_imu_parsed = _imu_parsed;
}

/*!
 * @brief This function moves the value in member imu_parsed
 * @param _imu_parsed New value to be moved in member imu_parsed
 */
void SensorDataSync::imu_parsed(
        MPU6050MSG&& _imu_parsed)
{
    m_imu_parsed = std::move(_imu_parsed);
}

/*!
 * @brief This function returns a constant reference to member imu_parsed
 * @return Constant reference to member imu_parsed
 */
const MPU6050MSG& SensorDataSync::imu_parsed() const
{
    return m_imu_parsed;
}

/*!
 * @brief This function returns a reference to member imu_parsed
 * @return Reference to member imu_parsed
 */
MPU6050MSG& SensorDataSync::imu_parsed()
{
    return m_imu_parsed;
}
/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void SensorDataSync::timestamp(
        int32_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
int32_t SensorDataSync::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
int32_t& SensorDataSync::timestamp()
{
    return m_timestamp;
}


size_t SensorDataSync::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool SensorDataSync::isKeyDefined()
{
    return false;
}

void SensorDataSync::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
